<div id="content">
	<div class="container">
		<div class="row">
			<div class="col-md-8 col-md-offset-2">
				<a class="anchor" id="top"></a>
				<h1><code>test161</code>: The OS/161 Testing Tool</h1>
				<div class="sect1">
<a class="anchor" id="_introduction"></a><h2>1. Introduction</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p><code>test161</code> is the OS/161 testing tool designed and implemented by
<a href="https://blue.cse.buffalo.edu/people/shaseley/" target="_blank" class="external">Scott Haseley</a> and
<a href="https://blue.cse.buffalo.edu/people/ychen78/" target="_blank" class="external">Yihong Chen</a>. It allows you both
to test your assignments locally and submit them for remote evaluation.</p>
</div>
<div class="paragraph">
<p>Below we run through how to install, configure, run, and use <code>test161</code>. While
the specific testing target will change from assignment to assignment, we use
<a href="https://www.ops-class.org/asst/1/" class="noexternal">ASST1</a> below as an example. Note that this tutorial duplicates some
information from the <code>test161</code> <a href="https://github.com/ops-class/test161/blob/master/README.adoc" target="_blank" class="external">README</a> located on the project&#x2019;s
<a href="https://github.com/ops-class/test161" target="_blank" class="external">GitHub page</a>.</p>
</div>
<div class="sect2">
<a class="anchor" id="install"></a><h3>1.1. Installation</h3>
<div class="paragraph">
<p><code>test161</code> is distributed as part of the <a href="https://www.ops-class.org/asst/toolchain/" class="noexternal"><code>ops-class.org</code> toolchain</a>, which is packaged for
Ubuntu Linux 14.04 &quot;Trusty&quot; and 16.04 &quot;Xenial&quot;. Install and upgrade it from the
<a href="https://www.ops-class.org/asst/toolchain/#ppa" class="noexternal"><code>ops-class.org</code> PPA</a>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash lang-bash" data-lang="bash">sudo add-apt-repository ppa:ops-class/os161-toolchain
sudo apt-get update
sudo apt-get install os161-toolchain
<span class="hljs-comment"># sudo apt-get install test161 # If you don&apos;t want the entire toolchain</span></code></pre>
</div>
</div>
<div class="paragraph">
<p>If you need an Ubuntu environment to develop OS/161, you
may want to try our
<a href="https://www.ops-class.org/asst/toolchain/#vagrant" class="noexternal"><code>ops-class.org</code> Vagrant virtual machine</a>.</p>
</div>
<div class="paragraph">
<p>If needed, <code>test161</code> can also be installed from sources. See the
<a href="https://github.com/ops-class/test161/blob/master/README.adoc" target="_blank" class="external">README</a> for more
details.</p>
</div>
<div class="paragraph">
<p>Once you have installed <code>test161</code> you should be able to run it and see output
like this:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161
usage:
    test161  &lt;command&gt; &lt;flags&gt; &lt;args&gt;

    test161 run [-dry-run | -d] [-explain | -x] [sequential | -s]
                [-no-dependencies | -n] [-verbose | -v (whisper|quiet|loud*)]
                [-tag] &lt;names&gt;

    test161 submit [-debug] [-verify] [-no-cache] &lt;target&gt; &lt;commit&gt;

    test161 list (targets|tags|tests) [-remote | -r]

    test161 config [-debug] [(add-user|del-user|change-token)] &lt;username&gt; &lt;token&gt;
    test161 config test161dir &lt;dir&gt;

    test161 version

    test161 help for a detailed commands description</code></pre>
</div>
</div>
</div>
<div class="sect2">
<a class="anchor" id="__a_href_http_os161_eecs_harvard_edu_os_161_a_dependencies"></a><h3>1.2. <a href="http://os161.eecs.harvard.edu" target="_blank" class="external">OS/161</a> Dependencies</h3>
<div class="paragraph">
<p>You should be able to use <code>test161</code> to test any <a href="http://os161.eecs.harvard.edu" target="_blank" class="external">OS/161</a>-based kernel&#x2014;&#x200B;but it
is easiest to start with our <a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a>. Here are some of the changes that we
have made to OS/161 to support automated testing and how to apply them to your
OS/161 tree if you are not using our sources. (And if you are an instructor
using <a href="http://os161.eecs.harvard.edu" target="_blank" class="external">OS/161</a>, let&#x2019;s collaborate on maintaining OS/161! Please contact us.)</p>
</div>
<div class="sect3">
<a class="anchor" id="_environment_inference"></a><h4>1.2.1. Environment Inference</h4>
<div class="paragraph">
<p>To run and submit your OS/161 kernel, <code>test161</code> needs to be able to find your
OS/161 sources and the root directory where your kernel is installed. If you
are using the <a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a> this will happen automatically using symlinks
created during kernel compilation.</p>
</div>
<div class="paragraph">
<p>Otherwise, you will need to merge our changes to <code>mk/os161.kernel.mk</code>,
specifically
<a href="https://github.com/ops-class/os161/commit/3ab7073fc255dcc17d559485ae6a54c888c72766" target="_blank" class="external">this
commit</a>. It should be straightforward to merge into <a href="http://os161.eecs.harvard.edu" target="_blank" class="external">OS/161</a> sources used by
other schools.</p>
</div>
</div>
<div class="sect3">
<a class="anchor" id="__code_test161_code_configuration_files"></a><h4>1.2.2. <code>test161</code> Configuration Files</h4>
<div class="paragraph">
<p><code>test161</code> uses a <a href="http://yaml.org" target="_blank" class="external">YAML</a>-based configuration system. To run
tests you will need configuration files for <code>test161</code>. Again, if you are using
the <a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a> you will already have these configuration files in a
subdirectory of your OS/161 source tree.</p>
</div>
<div class="paragraph">
<p>If not, you can easily add the
<a href="https://github.com/ops-class/test161-conf" target="_blank" class="external"><code>test161</code> configuration</a> to your
existing OS/161 sources:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash lang-bash" data-lang="bash"><span class="hljs-built_in">cd</span> &lt;your OS/161 <span class="hljs-built_in">source</span> directory&gt;
git <span class="hljs-built_in">clone</span> https://github.com/ops-class/<span class="hljs-built_in">test</span>161-conf/ <span class="hljs-built_in">test</span>161
rm -rf <span class="hljs-built_in">test</span>161/.git
<span class="hljs-comment"># Do whatever you need to do to add the files to your version control system.</span>
<span class="hljs-comment"># Alternatively, use a Git submodule if your repository is using Git.</span></code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<a class="anchor" id="_running_code_test161_code_targets"></a><h2>2. Running <code>test161</code> Targets</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p><code>test161</code> is a very flexible tool and can rapidly run one or many tests and
evaluate their output. In this section we show you how to obtain and run
<code>test161</code> targets.</p>
</div>
<div class="paragraph">
<p>For this example, we&#x2019;ll assume that you want to run all tests for ASST1 and
perform grading. To do that, you provide the <code>asst1</code> target as the argument to
<code>test161 run</code>. Once you&#x2019;ve built and installed an OS/161 kernel, here&#x2019;s what
happens when we run it on the base
<a href="https://github.com/ops-class/os161" target="_blank" class="external"><code>ops-class.org</code> OS/161 sources</a>:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 run asst1
[boot.t          ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[boot.t          ]      0.006289
[boot.t          ]      0.006289        OS/161 base system version 2.0.1
[boot.t          ]      0.006289        Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
[boot.t          ]      0.006289           President and Fellows of Harvard College.  All rights reserved.
[boot.t          ]      0.227285
[boot.t          ]      0.227285        Put-your-group-name-here&apos;s system version 0 (DUMBVM #2)
[boot.t          ]      0.267567
[boot.t          ]      0.267567        764k physical memory available
[boot.t          ]      0.287666        Device probe...
[boot.t          ]      0.297720        lamebus0 (system main bus)
[boot.t          ]      0.317862        emu0 at lamebus0
[boot.t          ]      0.327908        ltrace0 at lamebus0
[boot.t          ]      0.337925        ltimer0 at lamebus0
[boot.t          ]      0.347946        beep0 at ltimer0
[boot.t          ]      0.358038        rtclock0 at ltimer0
[boot.t          ]      0.378165        lrandom0 at lamebus0
[boot.t          ]      0.388208        random0 at lrandom0
[boot.t          ]      0.398299        lhd0 at lamebus0
[boot.t          ]      0.408364        lser0 at lamebus0
[boot.t          ]      0.418427        con0 at lser0
[boot.t          ]      0.428477
[boot.t          ]      0.428477        cpu0: MIPS/161 (System/161 2.x) features 0x0
[boot.t          ]      0.458668        2 CPUs online
[boot.t          ]      0.458668        OS/161 kernel [? for menu]:
[boot.t          ]      0.730138
[boot.t          ]      0.740156        Shutting down.
[boot.t          ]      0.740156        The system is halted.
[boot.t          ]      0.750199        sys161: 26551578 cycles (12701612 run, 13849966 global-idle)
[boot.t          ]      0.750199        sys161:   cpu0: 4714252 kern, 0 user, 135235 idle; 7626 ll, 7626/0 sc, 21863 sync
[boot.t          ]      0.750199        sys161:   cpu1: 312156 kern, 0 user, 4537331 idle; 7 ll, 7/0 sc, 15 sync
[boot.t          ]      0.750199        sys161: 1146 irqs 0 exns 0r/0w disk 2r/597w console 0r/0w/1m emufs 0r/0w net
[boot.t          ]      0.750199        sys161: Elapsed real time: 0.166175 seconds (159.781 mhz)
[boot.t          ]      0.750199        sys161: Elapsed virtual time: 0.752267915 seconds (25 mhz)
[boot.t          ]      0.750199        shutdown: normal shutdown
[synch/rwt4.t    ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/lt3.t     ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/sem1.t    ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/lt2.t     ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/rwt3.t    ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/rwt5.t    ]      0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/rwt4.t    ]      0.006289
[synch/lt3.t     ]      0.006289
[synch/lt2.t     ]      0.006289
[synch/rwt3.t    ]      0.006289
[synch/rwt5.t    ]      0.006289
[synch/rwt4.t    ]      0.006289        OS/161 base system version 2.0.1
[synch/lt3.t     ]      0.006289        OS/161 base system version 2.0.1
[synch/lt2.t     ]      0.006289        OS/161 base system version 2.0.1
[synch/rwt3.t    ]      0.006289        OS/161 base system version 2.0.1

# ... lots of output omitted ...

Test                             Result                Memory Leaks        Score
------------------------------   -------------------   ------------   ----------
boot.t                           correct                        ---          0/0
synch/sem1.t                     correct                    0 bytes          0/0
synch/lt3.t                      incorrect                      ---          0/1
synch/lt1.t                      incorrect                  0 bytes          0/8
synch/lt2.t                      incorrect                      ---          0/1
synch/cvt5.t                     skip (synch/lt1.t)             ---          0/1
synch/cvt1.t                     skip (synch/lt3.t)             ---          0/4
synch/cvt2.t                     skip (synch/lt3.t)             ---          0/3
synch/cvt3.t                     skip (synch/lt3.t)             ---          0/1
synch/cvt4.t                     skip (synch/lt3.t)             ---          0/1
synch/rwt5.t                     incorrect                      ---          0/1
synchprobs/sp2.t                 skip (synch/lt3.t)             ---         0/10
synch/rwt3.t                     incorrect                      ---          0/1
synchprobs/sp1.t                 skip (synch/lt2.t)             ---         0/10
synch/rwt4.t                     incorrect                      ---          0/1
synch/rwt1.t                     incorrect                  0 bytes          0/5
synch/rwt2.t                     skip (synch/cvt2.t)            ---          0/2

Total Correct  : 2/17
Total Incorrect: 7/17
Total Skipped  : 8/17

Total Score    : 0/50</code></pre>
</div>
</div>
<div class="paragraph">
<p>As you can see, <code>test161</code> has rapidly generated a lot of useful output while
also giving our base sources the score they deserve on <a href="https://www.ops-class.org/asst/1/" class="noexternal">ASST1</a>: 0/50! Let&#x2019;s
quickly go through the two parts of the <code>test161</code> output.</p>
</div>
<div class="sect2">
<a class="anchor" id="__code_sys161_code_output"></a><h3>2.1. <code>sys161</code> Output</h3>
<div class="paragraph">
<p>To speed execution, <code>test161</code> runs multiple tests in parallel. As a result,
test output is interleaved at parts of the testing suite where multiple tests
are being run. At the beginning of the <a href="https://www.ops-class.org/asst/1/" class="noexternal">ASST1</a> test suite only the boot test
is being performed because all other tests depend on it, so the output is not
interleaved. However, at the end several tests are being run in parallel and
so the output is interleaved. Output prefixes show what test generated each
output line.  This can be difficult to interpret, so <code>test161 run</code> provides a
<code>-s</code> option which performs sequential testing.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_test_status"></a><h3>2.2. Test Status</h3>
<div class="paragraph">
<p>Following the test output <code>test161</code> prints a summary detailing what tests were
performed and, if appropriate, how they were scored. Scoring is optional and
only performed when using certain targets.</p>
</div>
<div class="paragraph">
<p>In the example above, the output shows that the <code>boot</code> and <code>sem1</code> tests ran
correctly but earned no points. That is because the kernel booted but this was
not worth any points for <a href="https://www.ops-class.org/asst/1/" class="noexternal">ASST1</a>, and working semaphores are provided as part
of the base <a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a>. However, if the kernel had not booted the rest of the
tests would have been skipped, and if semaphores were broken, many tests would
also have been skipped. In this case, both the <code>boot</code> and semaphore tests were
run because they were specified as a <em>dependency</em> by other tests that were
included as part of the <a href="https://www.ops-class.org/asst/1/" class="noexternal">ASST1</a> target. <code>test161</code> can automatically run test
dependencies when appropriate.</p>
</div>
<div class="paragraph">
<p>For the next 15 tests above, <code>test161</code> reports that they either failed
(<code>incorrect</code>) or were skipped (<code>skip</code>). This is unsurprising given that the
<a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a> do not include working locks, condition variables, or
reader-writer locks. As you complete portions of each assignment your score
will increase.</p>
</div>
<div class="paragraph">
<p><code>test161</code> skips tests because their dependencies are not met. For the 8 tests
that were skipped above, in each case <code>test161</code> reports one of the failed or
missing dependencies that caused it to skip the test. For example, the
condition-variable tests <code>cvt{1,2}</code> depend on working locks, and these locks
did not work. Similarly, both the stoplight and whale mating synchronization
test drivers rely on working locks.</p>
</div>
<div class="paragraph">
<p><code>test161</code> also reports memory leaks when this is enabled by the test. In some
cases above, it was not. But it is reassuring that the semaphores provided by
the <a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a> don&#x2019;t leak memory!</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_running_single_code_test161_code_tests"></a><h3>2.3. Running Single <code>test161</code> Tests</h3>
<div class="paragraph">
<p>In our example above, <code>test161</code> was used to run a <em>target</em>, which configures a
set of tests to be run and maps test results to point values. If you are
curious, look at the <code>asst1.tt</code> file located in the <code>targets</code> subdirectory of
your <code>test161</code> configuration directory.</p>
</div>
<div class="paragraph">
<p>But <code>test161</code> can also be a part of your development process by running single
tests and reporting their output (without scores). Here is an example, again
with the base <a href="https://www.ops-class.org/asst/toolchain/#os161" class="noexternal"><code>ops-class.org</code> OS/161 sources</a>:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 run synch/sem1.t
[boot.t      ]  0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[boot.t      ]  0.006289
[boot.t      ]  0.006289        OS/161 base system version 2.0.1
[boot.t      ]  0.006289        Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
[boot.t      ]  0.006289           President and Fellows of Harvard College.  All rights reserved.
[boot.t      ]  0.237759

# ... lots of output omitted ...

[synch/sem1.t]  0.000000        sys161: System/161 release 2.0.8, compiled Mar  2 2016 17:16:01
[synch/sem1.t]  0.006289
[synch/sem1.t]  0.006289        OS/161 base system version 2.0.1
[synch/sem1.t]  0.006289        Copyright (c) 2000, 2001-2005, 2008-2011, 2013, 2014
[synch/sem1.t]  0.006289           President and Fellows of Harvard College.  All rights reserved.
[synch/sem1.t]  0.237964
[synch/sem1.t]  0.237964        Put-your-group-name-here&apos;s system version 0 (DUMBVM #6)
[synch/sem1.t]  0.268137
[synch/sem1.t]  0.268137        764k physical memory available
[synch/sem1.t]  0.288267        Device probe...
[synch/sem1.t]  0.298354        lamebus0 (system main bus)

# ... lots of output omitted ...

[synch/sem1.t]  3.364153        sys161:   cpu30: 327482 kern, 0 user, 40112024 idle; 43 ll, 13/30 sc, 10 sync
[synch/sem1.t]  3.364153        sys161:   cpu31: 327115 kern, 0 user, 40112391 idle; 44 ll, 13/31 sc, 10 sync
[synch/sem1.t]  3.364153        sys161: 8409 irqs 0 exns 0r/0w disk 15r/5300w console 0r/0w/1m emufs 0r/0w net
[synch/sem1.t]  3.364153        sys161: Elapsed real time: 3.686627 seconds (33.7904 mhz)
[synch/sem1.t]  3.364153        sys161: Elapsed virtual time: 3.365535757 seconds (25 mhz)
[synch/sem1.t]  3.364153        shutdown: normal shutdown

Test                             Result       Memory Leaks
------------------------------   ----------   ------------
boot.t                           correct               ---
synch/sem1.t                     correct           0 bytes

Total Correct  : 2/2</code></pre>
</div>
</div>
<div class="paragraph">
<p>In this case we ran the semaphore test <code>sem1</code>, which does work in the base
sources, and <code>test161</code> produced output reflecting that. You can instruct
<code>test161</code> to omit a test&#x2019;s dependencies by providing the <code>-n</code> flag to <code>test161
run</code>, in which case it would have skipped the <code>boot</code> test.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_running_groups_of_tests"></a><h3>2.4. Running Groups of Tests</h3>
<div class="paragraph">
<p>The name passed to <code>test161 run</code> identifies a test relative to the <code>tests</code>
subdirectory of the the <code>test161</code> configuration directory. (If you have
installed our
<a href="https://github.com/ops-class/test161/tree/master/bash_completion" target="_blank" class="external"><code>bash</code>
completion script</a>, <code>test161</code> should tab complete many things including tests
and targets.)</p>
</div>
<div class="paragraph">
<p>In this case, <code>synch/sem1.t</code> contains:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml lang-yaml" data-lang="yaml"><span class="hljs-meta">---</span>
<span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Semaphore Test&quot;</span>
<span class="hljs-attr">description:</span>
  Tests core semaphore logic through cyclic signaling.
<span class="hljs-attr">tags:</span> [synch, semaphores, kleaks]
<span class="hljs-attr">depends:</span> [boot]
<span class="hljs-attr">sys161:</span>
<span class="hljs-attr">  cpus:</span> <span class="hljs-number">32</span>
<span class="hljs-meta">---</span>
khu
sem1
khu</code></pre>
</div>
</div>
<div class="paragraph">
<p>You&#x2019;ll notice that the <code>sem1</code> test also belongs to three groups: <code>synch</code>,
<code>semaphores</code>, and <code>kleaks</code>. Groups provide another useful way to run
<code>test161</code>. Here we&#x2019;ve asked <code>test161</code> to run all of the tests that are in the
<code>synch</code> group.</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 run synch
Test                             Result                Memory Leaks
------------------------------   -------------------   ------------
boot.t                           correct                        ---
synch/sem1.t                     correct                    0 bytes
synch/lt3.t                      incorrect                      ---
synch/lt1.t                      incorrect                  0 bytes
synch/lt2.t                      incorrect                      ---
synch/cvt5.t                     skip (synch/lt2.t)             ---
synch/cvt1.t                     skip (synch/lt2.t)             ---
synch/cvt4.t                     skip (synch/lt3.t)             ---
synch/cvt2.t                     skip (synch/lt2.t)             ---
synch/cvt3.t                     skip (synch/lt2.t)             ---
synch/rwt3.t                     incorrect                      ---
synch/rwt2.t                     skip (synch/cvt2.t)            ---
synch/rwt4.t                     incorrect                      ---
synch/rwt1.t                     incorrect                  0 bytes
synch/rwt5.t                     incorrect                      ---

Total Correct  : 2/15
Total Incorrect: 7/15
Total Skipped  : 6/15</code></pre>
</div>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_listing_available_tests"></a><h3>2.5. Listing Available Tests</h3>
<div class="paragraph">
<p>The <code>test161 list</code> sub-command can be used to list available tests, tags, and
and targets. The following command lists all available <code>test161</code> tests along
with their descriptions:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 list tests

Test ID                               Name                Description
-----------------------------------   -----------------   -------------------------------------
boot.t                                Kernel Boot         Tests whether your kernel will boot.
coremap/coremap-loose.t               Coremap Test        Allocates and frees all physical
                                      (Loose Bounds)      memory multiple times checking that
                                                          the amount allocated is within a
                                                          reasonable bound.
coremap/coremap-tight.t               Coremap Test        Allocates and frees all physical
                                      (Tight Bounds)      memory multiple times checking that
                                                          the amount allocated is within a
                                                          reasonable bound.
coremap/km1.t                         Basic kmalloc       Tests the kernel subpage allocator by
                                      Test                allocating a large number of objects
                                                          and freeing them somewhat later.

# ... lots of output omitted ...</code></pre>
</div>
</div>
<div class="paragraph">
<p>The following command outputs the <em>tags</em>&#x2009;&#x2014;&#x2009;or named groups of tests&#x2009;&#x2014;&#x2009;along
with the tests that share that tag:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 list tags

badcall
     stability/badcall/badcall-close.t
     stability/badcall/badcall-dup2.t
     stability/badcall/badcall-execv.t
     stability/badcall/badcall-lseek.t
     stability/badcall/badcall-open.t
     stability/badcall/badcall-read.t
     stability/badcall/badcall-waitpid.t
     stability/badcall/badcall-write.t
boot
     boot.t
console
     syscalls/consoletest.t
coremap
     coremap/coremap-loose.t
     coremap/coremap-tight.t
     coremap/km1.t
     coremap/km2.t
     coremap/km3.t
     coremap/km4.t
     coremap/not-dumbvm.t
crash
     stability/crash/crash-allS.t
cvs
     synch/cvt1.t
     synch/cvt2.t
     synch/cvt3.t
     synch/cvt4.t
     synch/cvt5.t

...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Executing <code>test161 run &lt;tag&gt;</code> for any of the tags listed will run all tests
listed below the tag.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_more_code_test161_run_code_options"></a><h3>2.6. More <code>test161 run</code> Options</h3>
<div class="paragraph">
<p>In the previous sections, we used <code>test161 run</code> for its primary function,
namely to run tests. However, <code>test161</code> run supports some useful command
line options as well.</p>
</div>
<div class="paragraph">
<p>(For more information, run <code>test161</code> help or read the
<a href="https://github.com/ops-class/test161#usage" target="_blank" class="external">Usage</a> section from the <code>test161</code>
Github <a href="https://github.com/ops-class/test161/blob/master/README.adoc" target="_blank" class="external">README</a>).</p>
</div>
<div class="sect3">
<a class="anchor" id="__code_test161_code_explain"></a><h4>2.6.1. <code>test161</code> Explain</h4>
<div class="paragraph">
<p>Often times, students want to know what a test is testing for. Additionally,
they may want to configure <code>sys161</code> the same way the target does in order to
debug an issue discovered while running a target. For this, the <code>-explain (-x)</code>
option was created:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 run -explain synch/lt1.t

boot.t                         (dependency)
synch/sem1.t                   (dependency)

synch/lt1.t
------------------------------------------------------------
Name        : Lock Test 1
Description : Tests core lock functionality through modifications to shared state.

test161 Monitor Conf:
  Progress Timeout : 10
  Command Timeout  : 60
  Window           : 400
  Kernel Min       : disabled
  Kernel Max       : 1
  User Min         : disabled
  User Max         : 1

sys161 Conf:
0 serial
1	emufs
28	random seed=3540
29	timer
30	trace
31	mainboard ramsize=1M cpus=32

Dependencies:
     boot.t
     synch/sem1.t
Commands:
    Cmd Line    : boot
      Panics    : no
      Times Out : no
      Timeout   : 60
      Points    : 0
    Cmd Line    : khu
      Panics    : no
      Times Out : no
      Timeout   : 60
      Points    : 0
    Cmd Line    : lt1
      Panics    : no
      Times Out : no
      Timeout   : 60
      Points    : 0
      Output    :
            Text     : lt1: SUCCESS
            Trusted  : true
            KeyID    : lt1
    Cmd Line    : khu
      Panics    : no
      Times Out : no
      Timeout   : 60
      Points    : 0
    Cmd Line    : q
      Panics    : no
      Times Out : no
      Timeout   : 60
      Points    : 0</code></pre>
</div>
</div>
<div class="paragraph">
<p>There are a couple things to note here. First, the exact <code>sys161</code> configuration
used for the test is provided. If your test passes in the simulator but not
with <code>test161</code>, there is a good chance there is a configuration discrepancy.
However, the random seed will be different each time you run this, so it
does not need to be part of your <code>sys161</code> configuration. Second, each command
along with its expected output is listed under <em>Commands:</em>. For the <code>boot</code> and
<code>khu</code> commands, there are no expected output lines, but they are expected not to
panic. For <code>lt1</code>, <code>test161</code> is expecting to see <code>lt1: SUCCESS</code>, in addition to
not panicking. <strong>If you ever want to know what the test <em>should</em> be outputting,
use the <code>-explain</code> option</strong>.</p>
</div>
</div>
<div class="sect3">
<a class="anchor" id="_dry_runs"></a><h4>2.6.2. Dry Runs</h4>
<div class="paragraph">
<p>To see what will be run with <code>test161 run</code> without actually running it, add the
<code>-d</code> flag. For example, the following is useful to see what is run for the asst1
target, with point values, without actually running the tests:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 run -d asst1

Test ID                          Test Name                Points
------------------------------   ----------------   ------------
boot.t                           Kernel Boot        (dependency)
synch/sem1.t                     Semaphore Test     (dependency)
synch/lt2.t                      Lock Test 2                   1
synch/lt3.t                      Lock Test 3                   1
synch/lt1.t                      Lock Test 1                   8
synch/cvt2.t                     CV Test 2                     3
synch/cvt3.t                     CV Test 3                     1
synch/cvt5.t                     CV Test 5                     1
synch/cvt1.t                     CV Test 1                     4
synch/cvt4.t                     CV Test 4                     1
synch/rwt1.t                     RW Lock Test 1                5
synchprobs/sp1.t                 Whalemating Test             10
synch/rwt3.t                     RW Lock Test 3                1
synch/rwt2.t                     RW Lock Test 2                2
synch/rwt5.t                     RW Lock Test 5                1
synch/rwt4.t                     RW Lock Test 4                1
synchprobs/sp2.t                 Stoplight Test               10</code></pre>
</div>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<a class="anchor" id="_submitting_using_code_test161_code"></a><h2>3. Submitting Using <code>test161</code></h2>
<div class="sectionbody">
<div class="paragraph lead">
<p>Once you are happy with your score on each assignment <span class="badge footnote default-tooltip" data-toggle="popover" data-placement="top" data-html="true" data-content="Or with the deadline looming&amp;#x2026;&amp;#x200B;">1</span>, <code>test161</code> allows you to submit your assignments for
automated grading.</p>
</div>
<div class="paragraph">
<p>With some important exceptions (see below), remote <code>test161</code> grading is
identical to the tests that you run in your local environment. As a result,
the grade or performance marks that you achieve on the remote server should
line up closely with what you achieve locally.  <strong>This also means that it is
both unnecessary and discouraged to repeatedly submit assignments using
<code>test161</code>.</strong></p>
</div>
<div class="paragraph">
<p>You will notice that the remote <code>test161</code> output is different than what you
normally see, and that many useful messages are disabled. This is because
remote automated testing is <em>not intended to produce diagnostic output</em>.
Iterative <code>test161</code> testing should be done locally. If you are missing tests
required to evaluate your kernel, that is because writing them is part of the
assignment. So do that, rather than bang on the <code>test161</code> server.</p>
</div>
<div class="sect2">
<a class="anchor" id="_preparing_for_submission"></a><h3>3.1. Preparing for Submission</h3>
<div class="paragraph">
<p>To submit you first need to</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Create an account on <code>test161.ops-class.org</code></p>
</li>
<li>
<p>Log in and <a href="/profile/">create and retrieve</a> your user token and public key</p>
</li>
<li>
<p>Configure your repository to allow <code>test161</code> to clone it during remote testing.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Log in to <code>test161.ops-class.org</code> and click on the <a href="/profile/">profile tab</a>.
You should see a submit token, which you will need to use in a minute.</p>
</div>
<div class="paragraph">
<p>You should also see a dialog allowing you to create a new public key. The
reason for this is that <code>test161</code> needs access to your Git repository to test
it but will <em>not</em> test public repositories. So you need to ensure that
<code>test161</code> can clone the OS/161 repository that you are going to submit with
the public key that is shown on your <a href="/profile/">profile page</a>. <code>test161</code>
will verify this during assignment submission.</p>
</div>
<div class="paragraph">
<p>How to add this key differs depending on where you host your private OS/161
Git repository. GitHub allows you to set up
<a href="https://developer.github.com/guides/managing-deploy-keys/" target="_blank" class="external">read-only deploy
keys</a>, as does <a href="http://doc.gitlab.com/ce/ssh/README.html" target="_blank" class="external">GitLab</a>. <strong>You should
not add this key to your Git user account or give it push access to your
OS/161 or any other repository.</strong> If you are hosting your Git repository
somewhere that does not support deployment keys, we would suggest finding an
alternative that does.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_configuration_for_submission"></a><h3>3.2. Configuration for Submission</h3>
<div class="paragraph">
<p>To submit assignments you have to add you (and your partner&#x2019;s, if you have
one) submission token to <code>test161</code>:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ test161 config add-user &lt;username&gt; &lt;token&gt;
# Repeat as needed for your partner. Also look at del-user and change-token.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Your <code>username</code> is shown on your <a href="/profile/">profile page</a>, as is your
token. If you are working with a partner you should add their username and
token as well. Contact them privately to get their token. If you are working
alone only submit on behalf of yourself.</p>
</div>
<div class="paragraph">
<p>At any point you can use the <a href="/profile/">profile page</a> to regenerate a new
public key or private token, which you should then update using <code>test161
config change-token</code>. This is particularly important if you end a partnership
to ensure that your partner can no longer submit on your behalf.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_submitting_your_assignment"></a><h3>3.3. Submitting Your Assignment</h3>
<div class="paragraph">
<p>If you have followed the instructions above then you are ready to submit your
assignment. But before you do, <strong>please test locally using <code>test161 run</code></strong>. Our
server is not intended to be part of your testing and development
process&#x2014;&#x200B;that&#x2019;s why we provided a local client and grading approximations.</p>
</div>
<div class="paragraph">
<p>That said, <em>please submit early and often</em> once you have code that you are
somewhat happy with. It is better to submit a few hours beforehand and lock
in partial credit than wait until the minutes before the deadline when you
might not receive any points.</p>
</div>
<div class="paragraph">
<p>Once you are happy with the score that you earned using <code>test161 run</code>, there
are a few other things you need to do before submitting. First, make sure that
all of your changes are checked in and that the tip of the branch that you are
working on has the changes that you want to submit. Second, make sure that the
changes are pushed to your upstream remote repository.</p>
</div>
<div class="paragraph">
<p>The best way to check for this is to run <code>git status</code>. This is bad output,
and indicates that you need to commit your changes:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash lang-bash" data-lang="bash">$ git status
On branch master
Your branch is up-to-date with <span class="hljs-string">&apos;origin/master&apos;</span>.
Changes not staged <span class="hljs-keyword">for</span> commit:
  (use <span class="hljs-string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)
...</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is also bad output and indicates that you need to push your changes to
your remote:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash lang-bash" data-lang="bash">$ git status
On branch master
Your branch is ahead of <span class="hljs-string">&apos;origin/master&apos;</span> by 1 commit.</code></pre>
</div>
</div>
<div class="paragraph">
<p>This is what you want to see:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash lang-bash" data-lang="bash">$ git status
On branch master
Your branch is up-to-date with <span class="hljs-string">&apos;origin/master&apos;</span>.
nothing to commit, working directory clean</code></pre>
</div>
</div>
<div class="paragraph">
<p>The next thing to ensure is that you&#x2019;ve earned some points on the assignment.
<code>test161</code> will not allow you to submit code that earns a zero. Use <code>test161
run</code> to determine this.</p>
</div>
<div class="paragraph">
<p>At that point you should be ready to submit. You need to run the <code>test161
submit &lt;target&gt;</code> command from your OS/161 source or root directory. When you
do, the following steps take place locally:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><code>test161</code> will try to clone a copy of your Git repository using the
deployment key shown on your <a href="/profile/">profile page</a>. This will fail if
you have not set up your remote properly to allow <code>test161</code> to clone using
this key.</p>
</li>
<li>
<p><code>test161</code> will check out the commit that you are submitting. By default this
is the tip of the branch that you are on, but you can pass a tree-ish argument
to <code>test161 submit</code>. This should succeed, since <code>test161</code> will confirm that
this commit is on the remote before getting this far.</p>
</li>
<li>
<p><code>test161</code> will then configure and build your kernel. If your kernel doesn&#x2019;t
build, this will fail <span class="badge footnote default-tooltip" data-toggle="popover" data-placement="top" data-html="true" data-content="Duh.">2</span>.</p>
</li>
<li>
<p><code>test161</code> will then run the kernel that it built by running <code>test161 run
&lt;target&gt;</code>. If you have not earned any points you will not be able to submit.
If you have earned some points, <code>test161</code> will ask you to confirm your
submission, confirm your partners, and agree to the course collaboration
policy before submitting.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>At that point the action moves to the <a href="/"><code>test161.ops-class.org</code></a> server.
If you are logged in, you can watch the live testing process on the
<a href="/">results page</a>. <strong>The server-side testing process is fundamentally no
different than the local testing process, with a few caveats described below.</strong>
Hopefully, when testing completes you have earned the score that you were
expecting.</p>
</div>
<div class="paragraph">
<p>Note that testing and grading may not happen immediately. If the <code>test161</code>
server receives many requests the process will slow down and future
submissions will be delayed. <strong>Keep this in mind when submitting close to the
deadline!</strong> Your submission will be timestamped when the request arrives on our
server, but you may not be able to see the testing results until after the
deadline has passed.</p>
</div>
<div class="paragraph">
<p>Congrats! You submitted your assignment.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_troubleshooting"></a><h3>3.4. Troubleshooting</h3>
<div class="paragraph">
<p>Here is a list of things to try if your submission is not succeeding, either
locally or remotely:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If you are having trouble submitting, use <code>test161 submit -debug -verify &lt;target&gt;</code>.
The <code>-verify</code> flag checks that your assignment can be submitted without
actually submitting it. The <code>-debug</code> flag shows you the commands it is running
to check your repository status.</p>
</li>
<li>
<p>Run <code>test161 config</code> to make sure things are configured how you think they
are.</p>
</li>
<li>
<p>Try <a href="/test161/#install">updating your copy of <code>test161</code></a>. This is always
safe to do.</p>
</li>
<li>
<p>Make sure that the <a href="/"><code>test161.ops-class.org</code></a>
server can use the public key that you have configured through the web
interface to pull from the repository that you are submitting.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Here is a list of things to try if you are not getting as much credit as you
deserve:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>If the assignment required you to write certain tests, make sure that they
are complete and accurate.</p>
</li>
<li>
<p>Make sure that <code>test161</code> is testing the same kernel that you are running
manually using <code>sys161</code>.</p>
</li>
<li>
<p>Examine the server logs to determine what went wrong and use that to focus
your local testing.</p>
</li>
</ol>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_differences_between_the_local_and_remote_testing_environments"></a><h3>3.5. Differences Between the Local and Remote Testing Environments</h3>
<div class="paragraph">
<p>One of the design goals of <code>test161</code> is to make local evaluation as accurate
as possible. However, there are some differences between your local test
environment and the remote one.</p>
</div>
<div class="paragraph">
<p>Specifically, before performing remote testing <code>test161</code> applies an <em>overlay</em>
to your kernel which removes some files and replaces the contents of others.
For example, we overwrite all of your <code>Makefile</code>s and anything else that we
have to interpret or run to make sure that you don&#x2019;t try to damage our server.
We also overwrite many of the tests in <code>kern/test</code> with trusted code to ensure
that your kernel is running our tests and that you didn&#x2019;t rewire the menu to
try and trick the testing suite <span class="badge footnote default-tooltip" data-toggle="popover" data-placement="top" data-html="true" data-content="We have a few other tricks up our sleeve here, so I wouldn&amp;#x2019;t bother trying to flummox the remote grader. Doing the assignment is probably easier.">3</span>.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_cheating_detection"></a><h3>3.6. Cheating Detection</h3>
<div class="paragraph">
<p>Finally, note that each repository submitted to the
<a href="/"><code>test161.ops-class.org</code></a> server will be checked in its entirely for
plagiarism: <strong>every file, and every commit</strong>, not limited to submissions. Any
evidence of plagiarism will be forwarded to the relevant course staff and
plagiarized assignments will be removed from the <code>test161</code> results and
leaderboards.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<a class="anchor" id="_writing_code_test161_code_tests"></a><h2>4. Writing <code>test161</code> Tests</h2>
<div class="sectionbody">
<div class="paragraph lead">
<p><code>test161</code> is designed to allow you to test your kernel using both the tests
we have provided and new tests that you may write for each assignment.</p>
</div>
<div class="paragraph">
<p>Below we describe how to create and run your own <code>test161</code> scripts. But
first, we describe the three key components of the <code>test161</code> configuration
directory: tests, commands, and targets.</p>
</div>
<div class="sect2">
<a class="anchor" id="_tests"></a><h3>4.1. Tests</h3>
<div class="paragraph">
<p>The main <code>test161</code> configuration object is a test, which are stored in files
with a <code>.t</code> extension <span class="badge footnote default-tooltip" data-toggle="popover" data-placement="top" data-html="true" data-content="In homage to the original &lt;code&gt;test161&lt;/code&gt; tool that David wrote years ago that also used a &lt;code&gt;.t&lt;/code&gt; extension.">4</span>. Here is an example
from <code>test161/synch/sem1.t</code>:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">---
name: &quot;Semaphore Test&quot;
description:
  Tests core semaphore logic through cycling signaling.
tags: [synch, semaphores]
depends: [boot]
sys161:
  cpus: 32
---
sem1</code></pre>
</div>
</div>
<div class="sect3">
<a class="anchor" id="_front_matter"></a><h4>4.1.1. Front matter</h4>
<div class="paragraph">
<p>The test consist of two parts. The header in between the first and second
<code>---</code> is <a href="http://yaml.org" target="_blank" class="external">YAML</a> front matter that provides test metadata. Here
it provides the name and a description of the test, includes the test in the
<code>synch</code> and <code>semaphores</code> tags, indicates that the test depends on the <code>boot</code>
test group, and configures <code>sys161</code> to run the test with 32 cores.</p>
</div>
<div class="paragraph">
<p>We will eventually provide more detail about test configuration options on
the <a href="https://github.com/ops-class/test161" target="_blank" class="external">GitHub page</a>, but for now you can
get a sense for the options by reading other test files and looking at the
<a href="https://github.com/ops-class/test161#configuration-options" target="_blank" class="external"><code>test161</code> defaults</a>.
About the only commonly useful option not used by <code>sem1.t</code> is a <code>ram</code> option
for <code>sys161</code>.</p>
</div>
</div>
<div class="sect3">
<a class="anchor" id="_test_inputs"></a><h4>4.1.2. Test inputs</h4>
<div class="paragraph">
<p>After the front matter comes the test itself. <code>test161</code> tests can be
considered series of inputs to the <code>sys161</code> simulator, plus a bit of
<a href="https://github.com/ops-class/test161#test-file-syntactic-sugar" target="_blank" class="external">syntactic
sugar</a>. For example, in this case note that we did not need to explicitly
shut the kernel down: <code>sem1</code> expands automatically to <code>sem1; q</code>.</p>
</div>
<div class="paragraph">
<p>This is particularly useful when running commands from the shell. <code>test161</code>
provides a <code>$</code> prefix indicating that a command should be run from the shell,
and knows how to start and exit the shell as appropriate. So this single
command:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">$ /bin/true</code></pre>
</div>
</div>
<div class="paragraph">
<p>expands to:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">s
/bin/true
exit
q</code></pre>
</div>
</div>
</div>
<div class="sect3">
<a class="anchor" id="_groups_of_tests"></a><h4>4.1.3. Groups of tests</h4>
<div class="paragraph">
<p><code>test161</code> allows you to group tests together using tags. For example, the
<code>sem1.t</code> test above is part of both the <code>semaphores</code> group (by itself) and
the <code>synch</code> group with a bunch of other tests, including <code>rwt{1-4}</code>,
<code>cvt{1-5}</code>, etc. Tags can be used both as arguments to <code>test161 run</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-bash lang-bash" data-lang="bash"><span class="hljs-built_in">test</span>161 run synch</code></pre>
</div>
</div>
<div class="paragraph">
<p>and as dependencies to other tests. As shown above, the <code>sem1.t</code> test depends
on the <code>boot</code> group which currently consists only of <code>test161/boot.t</code>. Here
is another example from <code>cvt1.t</code>:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">---
name: &quot;CV Test 1&quot;
description:
  Tests core CV functionality through cyclic waiting.
tags: [synch, cvs]
depends: [boot, semaphores, locks]
sys161:
  cpus: 32
---
cvt1</code></pre>
</div>
</div>
<div class="paragraph">
<p>Note that <code>cvt1.t</code> depends on <code>boot</code>, <code>locks</code> (since CVs require working
locks), and <code>semaphores</code> (since the test uses semaphores to shut down
cleanly).</p>
</div>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_identifying_single_tests"></a><h3>4.2. Identifying single tests</h3>
<div class="paragraph">
<p>Single tests can also be passed to <code>test161 run</code> or used as dependencies.
Single tests are identified by the relative path to the test file from the
<code>test161</code> configuration directory. For example, to run <code>boot.t</code> you would run
<code>test161 run boot.t</code>, and to run the <code>sem1.t</code> located in
<code>test161/synch/sem1.t</code> you would run <code>test161 run synch/sem1.t</code>.</p>
</div>
<div class="paragraph">
<p>Dependencies use the same syntax, <em>regardless of where the file that is
expressing the dependency is located</em>. For example, in <code>synch/cvt2.1.</code> we
could use <code>depends: [boot.t]</code>, or <code>depends: [synch/lt1.t]</code>.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_commands"></a><h3>4.3. Commands</h3>
<div class="paragraph">
<p><code>test161</code> tests consist of a series of <em>commands</em> that are actually executed
by the running OS/161 kernel or shell. To process the output of a test,
<code>test161</code> needs to know what it should expect each test to do and what
constitutes success and failure. For example, some of our stability tests
intentionally create a panic, and in other cases tests may intentionally
hang: like <code>/testbin/forkbomb</code> for <a href="/asst/2/">ASST2</a>.</p>
</div>
<div class="paragraph">
<p><code>test161</code> reads this information from all files with <code>.tc</code> extensions in the
<code>commands</code> subdirectory. Files in that directory are again in
<a href="http://yaml.org" target="_blank" class="external">YAML</a> syntax and can be processed in any order. Here is a
snippet from `commands/</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">templates:
  - name: sem1
  - name: lt1
	...
  - name: lt2
    panics: yes
    output:
      - text: &quot;lt2: Should panic...&quot;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Each commands file should define a single <code>templates</code> object consisting of an
array of output templates. Each names a single command, such as <code>sem1</code>, and
describes the output. By default, for tests that are only listed in a <code>.tc</code>
file <code>test161</code> will expect that output <code>&lt;command name&gt;: SUCCESS</code> indicates
success and the absence of this string indicates failure. Note that commands
must be named in a command file for this default to apply. Some commands,
like <code>q</code> and <code>exit</code>, do not succeed or fail&#x2014;&#x200B;as long as they do not panic,
which <code>test161</code> monitors separately. So they are omitted from the <code>.tc</code> file.</p>
</div>
<div class="paragraph">
<p>The commands file can also indicate more about the expected output. For
example, the entry above for <code>lt2</code> indicates that it should panic on success
and print <code>lt2: Should panic&#x2026;&#x200B;</code> before panicking.</p>
</div>
</div>
<div class="sect2">
<a class="anchor" id="_targets"></a><h3>4.4. Targets</h3>
<div class="paragraph">
<p>Tests and commands allow <code>test161</code> to run test scripts to evaluate your
OS/161 kernel. However, grading assignments requires one additional
components: <em>targets</em>.</p>
</div>
<div class="paragraph">
<p>Target files have a <code>.tt</code> extension and live in the <code>targets</code> subdirectory.
Each target configures a set of tests to run and their point values as well
as the kernel configuration and overlay used to build your kernel for that
specific target. Here is an example again drawn from <a href="/asst/1/">ASST1</a>:</p>
</div>
<div class="listingblock noautohighlight">
<div class="content">
<pre class="highlight"><code class="spelling_exception">name: asst1
version: 1
points: 50
type: asst
kconfig: ASST1
tests:
  - id: synch/lt1.t
    points: 8
  - id: synch/lt2.t
    points: 1
  - id: synch/lt3.t
    points: 1
...</code></pre>
</div>
</div>
<div class="paragraph">
<p>Format is again, <a href="http://yaml.org" target="_blank" class="external">YAML</a>. This target tells <code>test161</code> to use
the <code>ASST1</code> kernel configuration file, that there should be 50 total points
included in all of the tests, and that this is a assignment-type
configuration. We will also eventually distribute performance targets
allowing you to race your OS/161 kernel against other students.</p>
</div>
<div class="paragraph">
<p>After the configuration each target includes a lists of tests to run,
identified using the single-test format described above. It also maps test
success output to points, and includes flexible ways to give partial credit
for tests and commands that support partial credit.</p>
</div>
</div>
</div>
</div>

			</div>
			<div id="scrollspy" class="col-md-2 spelling_exception">
				<ul id="side" class="nav hidden-xs hidden-sm affix"
									data-spy="affix" style="padding-top:20px; padding-right:10px;">
					<li class="h5"><a href="#top">1. Introduction</a>
						<ul class="nav">
							<li class="h6"><a href="#install">1.1. Installation</a></li>
							<li class="h6"><a href="#__a_href_http_os161_eecs_harvard_edu_os_161_a_dependencies">1.2. OS/161 Dependencies</a></li>
						</ul>
					</li>
					<li class="h5"><a href="#_running_code_test161_code_targets">2. Running test161 Targets</a>
						<ul class="nav">
							<li class="h6"><a href="#__code_sys161_code_output">2.1. sys161 Output</a></li>
							<li class="h6"><a href="#_test_status">2.2. Test Status</a></li>
							<li class="h6"><a href="#_running_single_code_test161_code_tests">2.3. Running Single test161 Tests</a></li>
							<li class="h6"><a href="#_running_groups_of_tests">2.4. Running Groups of Tests</a></li>
							<li class="h6"><a href="#_listing_available_tests">2.5. Listing Available Tests</a></li>
							<li class="h6"><a href="#_more_code_test161_run_code_options">2.6. More test161 run Options</a></li>
						</ul>
					</li>
					<li class="h5"><a href="#_submitting_using_code_test161_code">3. Submitting Using test161</a>
						<ul class="nav">
							<li class="h6"><a href="#_preparing_for_submission">3.1. Preparing for Submission</a></li>
							<li class="h6"><a href="#_configuration_for_submission">3.2. Configuration for Submission</a></li>
							<li class="h6"><a href="#_submitting_your_assignment">3.3. Submitting Your Assignment</a></li>
							<li class="h6"><a href="#_troubleshooting">3.4. Troubleshooting</a></li>
							<li class="h6"><a href="#_differences_between_the_local_and_remote_testing_environments">3.5. Differences Between the Local and Remote Testing Environments</a></li>
							<li class="h6"><a href="#_cheating_detection">3.6. Cheating Detection</a></li>
						</ul>
					</li>
					<li class="h5"><a href="#_writing_code_test161_code_tests">4. Writing test161 Tests</a>
						<ul class="nav">
							<li class="h6"><a href="#_tests">4.1. Tests</a></li>
							<li class="h6"><a href="#_identifying_single_tests">4.2. Identifying single tests</a></li>
							<li class="h6"><a href="#_commands">4.3. Commands</a></li>
							<li class="h6"><a href="#_targets">4.4. Targets</a></li>
						</ul>
					</li>
				</ul>
			</div>
		</div>
	</div>
</div>
